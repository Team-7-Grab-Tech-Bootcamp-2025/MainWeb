basePath: /
definitions:
  model.Dish:
    description: This struct is used to represent a dish in the system
    properties:
      name:
        description: Name of the dish
        type: string
      price:
        description: Price of the dish
        type: number
    type: object
  model.LabelRating:
    properties:
      count:
        type: integer
      rating:
        type: number
    type: object
  model.LabelsRating:
    properties:
      ambience:
        $ref: '#/definitions/model.LabelRating'
      delivery:
        $ref: '#/definitions/model.LabelRating'
      food:
        $ref: '#/definitions/model.LabelRating'
      price:
        $ref: '#/definitions/model.LabelRating'
      service:
        $ref: '#/definitions/model.LabelRating'
    type: object
  model.Response:
    properties:
      data: {}
      message:
        type: string
    type: object
  model.Restaurant:
    description: This struct is used to represent a restaurant in the system
    properties:
      address:
        description: Address of the restaurant
        type: string
      city_id:
        description: City where the restaurant is located
        type: string
      distance:
        description: Distance from user's location in kilometers
        type: number
      district_id:
        description: District where the restaurant is located
        type: string
      food_type_name:
        description: Food type name of the restaurant
        type: string
      id:
        description: Unique identifier of the restaurant
        type: string
      latitude:
        description: Latitude and longitude coordinates of the restaurant
        type: number
      longitude:
        description: Longitude of the restaurant
        type: number
      name:
        description: Name of the restaurant
        type: string
      rating:
        description: Overall rating of the restaurant
        type: number
      review_count:
        description: Number of reviews for the restaurant
        type: integer
    type: object
  model.RestaurantDetail:
    properties:
      labels:
        allOf:
        - $ref: '#/definitions/model.LabelsRating'
        description: |-
          Ratings for different aspects of the restaurant
          ambience, delivery, food, price, and service ratings
      platforms:
        description: List of platforms where the restaurant is available
        items:
          type: string
        type: array
      rating_platforms:
        description: |-
          Ratings for the restaurant on different platforms
          The length of this array should match the length of the Platforms array
        items:
          type: number
        type: array
      restaurant:
        allOf:
        - $ref: '#/definitions/model.Restaurant'
        description: |-
          Information about the restaurant
          This includes the restaurant's ID, name, address, etc.
    type: object
  model.Review:
    description: This struct is used to represent a review in the system
    properties:
      feedback:
        type: string
      label:
        type: string
      rating:
        type: number
      rating_id:
        type: string
      rating_label:
        type: number
      review_time:
        type: string
      username:
        type: string
    type: object
  model.ReviewResponse:
    properties:
      reviews:
        items:
          $ref: '#/definitions/model.Review'
        type: array
      total_reviews:
        type: integer
    type: object
host: localhost:8080
info:
  contact:
    email: support@angi-reviews.com
    name: ANGI Support Team
    url: http://www.angi-reviews.com/support
  description: A comprehensive RESTful API for retrieving restaurant information,
    reviews, and menu details. The API provides endpoints for filtering restaurants
    by location, cuisine type, and more.
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  termsOfService: http://swagger.io/terms/
  title: Restaurant Review API
  version: "1.0"
paths:
  /api/v1/export:
    post:
      consumes:
      - application/json
      description: Exports restaurant ratings and review counts to a CSV file
      produces:
      - application/json
      responses:
        "202":
          description: Accepted
          schema:
            $ref: '#/definitions/model.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.Response'
      summary: Export restaurant ratings to CSV
      tags:
      - restaurants
  /api/v1/foodtypes:
    get:
      consumes:
      - application/json
      description: get all food types
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/model.Response'
            - properties:
                data:
                  items:
                    type: string
                  type: array
              type: object
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.Response'
      summary: Get all food types
      tags:
      - foodtypes
  /api/v1/recalculate:
    post:
      consumes:
      - application/json
      description: Recalculates ratings and review counts for all restaurants based
        on reviews and feedback labels
      produces:
      - application/json
      responses:
        "202":
          description: Accepted
          schema:
            $ref: '#/definitions/model.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.Response'
      summary: Recalculate restaurant ratings
      tags:
      - restaurants
  /api/v1/restaurants:
    get:
      consumes:
      - application/json
      description: |-
        get restaurants with various filter options including location, food type, city, district, etc. Accepct limit or page (if page is specified, limit will be ignored)
        If lat and lng are provided, it will return nearby restaurants sorted by distance.
        If lat and lng are not provided, it will sort by rating only.
        If count is true, it will return the total count of restaurants matching the filter criteria.
        If neither page nor limit is specified, it will return the first 30 restaurants.
        Multiple districts can be provided as comma-separated values.
      parameters:
      - description: Latitude
        in: query
        name: lat
        type: number
      - description: Longitude
        in: query
        name: lng
        type: number
      - description: Food type
        in: query
        name: foodtype
        type: string
      - description: City ID
        in: query
        name: city
        type: string
      - description: District IDs (comma-separated)
        in: query
        name: district
        type: string
      - description: Page number
        in: query
        name: page
        type: integer
      - description: Limit results
        in: query
        name: limit
        type: integer
      - default: false
        description: Return total count
        in: query
        name: count
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/model.Response'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/model.Restaurant'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.Response'
      summary: Get restaurants by filter
      tags:
      - restaurants
  /api/v1/restaurants/{id}:
    get:
      consumes:
      - application/json
      description: get restaurant by ID, with optional latitude and longitude for
        calculating distance
      parameters:
      - description: Restaurant ID
        in: path
        name: id
        required: true
        type: string
      - description: Latitude
        in: query
        name: lat
        type: number
      - description: Longitude
        in: query
        name: lng
        type: number
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/model.Response'
            - properties:
                data:
                  $ref: '#/definitions/model.RestaurantDetail'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.Response'
      summary: Get a restaurant
      tags:
      - restaurants
  /api/v1/restaurants/{id}/menu:
    get:
      consumes:
      - application/json
      description: get restaurant menu by ID
      parameters:
      - description: Restaurant ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/model.Response'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/model.Dish'
                  type: array
              type: object
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.Response'
      summary: Get restaurant menu
      tags:
      - restaurants
  /api/v1/restaurants/{id}/reviews:
    get:
      consumes:
      - application/json
      description: get restaurant reviews by ID and label
      parameters:
      - description: Restaurant ID
        in: path
        name: id
        required: true
        type: string
      - description: Label type (ambience, delivery, food, price, service)
        in: query
        name: label
        required: true
        type: string
      - default: 1
        description: Page number
        in: query
        name: page
        required: true
        type: integer
      - default: true
        description: Whether to count total reviews
        in: query
        name: count
        type: boolean
      - default: false
        description: If textonly = true, we get text only (ignore null reviews)
        in: query
        name: textonly
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/model.Response'
            - properties:
                data:
                  $ref: '#/definitions/model.ReviewResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.Response'
      summary: Get restaurant reviews by label
      tags:
      - restaurants
  /api/v1/restaurants/search:
    get:
      consumes:
      - application/json
      description: get restaurant name suggestions based on search query, query in
        format query=word1+word2+%2B+word3 (%2B is URL encoded +)
      parameters:
      - description: Search query
        in: query
        name: query
        required: true
        type: string
      - default: 10
        description: Limit results
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/model.Response'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/model.Restaurant'
                  type: array
              type: object
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.Response'
      summary: Get autocomplete suggestions for restaurants
      tags:
      - restaurants
  /health:
    get:
      consumes:
      - '*/*'
      description: get the status of server.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Response'
      summary: Show the status of server.
      tags:
      - health
schemes:
- http
- https
swagger: "2.0"
tags:
- description: Operations related to restaurants including details, reviews, and menus
  externalDocs:
    description: Detailed information about restaurant operations and filtering
    url: https://angi-reviews.com/docs/restaurants
  name: restaurants
- description: Operations related to cuisine types and food categories
  name: foodtypes
- description: API health check operations
  name: health
